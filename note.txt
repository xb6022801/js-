第21章 ajax与comet

XHR.open(method, url, isAsync)
open()只是启动一个请求，并不会真正发送。

XHR.send({ body } / null ) --> 真正发送。
return: responseText, responseXML (if content-type= "text/xml"), status, statusText

readyState // 0 1 2 3 4 --> readystatechange

设置自定义的请求头部信息: setRequestHeader(), 注: 在open 和 send 之间调用才行

GET请求: 每个parameter都需要用encodeURIComponent进行编码


XMLHttpRequest 2级内容:
FormData: var form = new FormData() //or form = new FormData(documents.forms[0])
超时限定: 只有ie8支持。 xhr.timeout = 1000 xhr.ontimeout = function() {}
overrideMimeType() 重写响应的mime类型，应用：如果返回xml而mime是text/plain，则responseXML为null，改写这个方法强制设置xml，
（必须在send之间）
进度事件：loadstart, progress, load, error, loadend
onload(event) || onprogress(event) //event.target = xhr
onprogress事件必须在open()方法前调用。

跨域
CORS （cross origin resource sharing, 跨源资源共享）：自定义http头部让浏览器和服务器之间沟通，从而决定是否响应请求。
client: origin: http://www.baidu.com
server: access-control-allow-origin: http://www.baidu.com
请求和响应都不包括cookie信息。

cors都是异步的，没有最后一个isAsync参数

IE8对cors的实现：XDR (XDomainRequest)
其他浏览器对cors的实现：直接用xhr就行。不用显式设置origin等。但是有一些限制：1.不能设置setRequestHeader() 2.不能设置cookie等。
为了消除歧义，对本站资源用相对url，对不同源的才用绝对url。

带凭据的请求: 如果发送的是带凭据带请求而响应中没有包含这个头部，则status = 0, responseText = empty, invoke onerror() event
client: withCredentials: true (IE10以及更早版本都不支持)
server: Allow-Control-Allow-Credentials: true

其他跨域技术：（都是在cors被广泛运用之前）
图像ping：最常用于跟踪用户点击页面或者动态广告曝光次数。缺点：只能发送GET，不能访问响应文本。
JSONP: json with padding （see server.js + testJsonp.js + index.html）
缺点: 如果响应中夹杂恶意代码，没有别的好的办法，只能放弃jsonp调用。2. 确定jsonp失败并不容易

comet：和ajax相反，comet是服务器向客户端推送。e.g. 长轮询 和 流。
长轮询：客户端发请求，服务器保持连接，有数据才发送响应，然后客户端立即再发请求。

websocket: ws:// or wss://
由于传递的数据包很小，很适合移动应用开发。
只能发送纯文本数据，所以需要JSON.stringify

SSE和微博socket的取舍:
- 是否有自由度建立和维护服务器，因为websocket需要升级服务器协议
- 是否需要双向通信，如果只是需要从服务器读取数据，用SSE就可以。

/*************************** end of chapter 21 *****************/
第7章: 函数表达式 (闭包，私有变量等)
函数声明 or 函数表达式
函数有name属性: alert(fn.name)

函数声明特性: 函数声明提升
函数表达式没有声明提升

递归函数中可以用arguments.callee来代替函数名，确保不会出问题。如果严格模式下，可以用命名函数表达式来达成相同成果。
(factorial.js)

闭包:
函数包括全局作用域+函数的执行作用域。执行完函数作用域被销毁。
闭包: 函数里的匿名函数，除了这2者之外，还包括父级函数的作用域，而父级函数由于还被引用，所以不会被销毁。
需要手动让匿名函数= null，就可以让该函数和父级函数被垃圾回收。
闭包因此会占用更多的内存。
闭包只能取得包含函数中任何变量的最后一个值。(闭包.js)

this对象: 通常情况下，全局情况下指向windows。在函数内指向执行函数的对象。
匿名函数的执行环境有全局性，this指向windows (经典问题。var that = this)

内存泄漏：
- IE：如果闭包的作用链中包含html元素，则该元素无法被销毁。
important: 闭包会饮用包含函数的整个活动对象

模仿块级作用域: 好处：不会污染全局作用域/父级作用域，减少内存开销 （私有作用域.js）

私有变量: arguments， local variables, 函数中定义的函数
可以创造可以访问私有变量的方法. （私有变量.js） 该模式的缺点是必须使用构造函数 （new fn()）,这将针对每个实例构造
一组新方法。not cool。 解决办法：静态私有变量。 (静态私有变量.js)

模块模式: 为单例创造私有变量和方法 (单例模式.js)
增加模块模式

/************************END OF CHAPTER 7 *********************************/

第四章： 变量，作用域和内存问题

基本类型和引用类型。
复制基本变量，实际上是复制值，两者是独立的

参数传递：基本类型和引用类型都是值传递。但是引用类型/对象在函数中属性被修改依然会体现出来（变量传递.js）

typeof null --> object
typeof undefined --> undefined

instanceof 检测是否为object，返回true。对基本类型返回false

执行环境：每个执行环境都有一个与之相关联点变量对象(variable object)
作用域链： scope chain
执行环境只有 全局 和 局部环境
延长作用域链方法: with or try/catch (with.js)

没有块级作用域 （{}: 举例： if语句，for循环中初始化的i （0到10），执行完以后还是10）
在函数里变量如果没有用var声明，则自动加入全局变量。

垃圾清理：找出不再使用的变量，然后释放其内存。
常用方法：标记清除 or 引用计数

IE的性能问题：IE的垃圾收集器是根据内存分配量运行的。
性能优化：全局变量和全局对象的属性，一旦不再有用，直接手动设置为null，以便垃圾回收，
globalVariable = null

/************************END OF CHAPTER 4 *********************************/

第六章：面向对象的程序设计

对象: 数据属性: [[configurable, enumerable, writable, value]]
Object.defineProperty(): 用该方法时，如果不指定，则configurable, enumerable, writable默认都是false

访问器属性： getters, setters
只指定getters意味着不能set value。

定一个attribut时数据属性或者访问器属性只能任选其一。
Object.getOwnPropertyDescriptor(Obj, attribut) 

设计模式：
工厂模式： 无需赘言
构造函数模式: 无需赘言, (大写开头)， 要创建新实例，必须要new操作符。new的过程执行了以下4个步骤：
- 新建对象
- 将函数作用域赋给对象
- 执行函数中的方法
- 返回对象

构造函数模式比工厂模式好，看（构造函数.js）
构造函数和普通函数没有任何区别，区别只是new 不 new
构造函数缺点： 每次新建实例都要新建内部函数

原型模式： 
每次新建实例，实例内部将包含一个指针指向构造函数的原型对象，初始情况下prototype只包含constructor
console.log(Person.prototype.isPrototypeOf(obj1)) //true
console.log(Object.getPrototypeOf(obj1))
实例不能overwrite原型上的值。但是可以在自己的实例上覆盖这个词。

in操作符： 所有enumerable = true的key都会显示, 
不管是否在原型或者实例上，都是true： console.log('name' in person1),
for..in: 对象上所有enumrable的属性，无论实例上或者原型上。
Object.keys(): 实例上所有enumerable属性
Object.getOwnPropertyNames(obj): 实例上无论enumerable与否的attribut，

...
组合实用原型模式和构造函数模式 : 构造函数定义实例属性，原型模式定义共享属性和方法
动态原型模式 (动态原型模式.js)
寄生构造函数模式 (寄生构造函数模式.js) : 和工厂模式很像。 不能用instanceof 来确定对象类型。不是特别推荐。应用场景: 实现拥有特殊方法的Array.
稳妥构造函数模式:禁止使用this，只能通过给定暴露方法来访问和修改数据。提供了一种安全性。

继承
关键: 子类通过 SubType.prototype = new SuperType() 来继承。且不能写在构造函数内部。(典型继承.js), 定义方法一定要放在替换原型之后
问题: 继承以后，父类实例的属性变成了子类原型对象的属性，被所有子类实例共享。 --> surtout pas!!; 所以实际中很少直接用原型继承。

方案一: 借用构造函数模式。问题: 并不能继承父类型原型对象的方法。导致函数复用不可行。 (继承_借用构造函数.js)
方案二: 组合继承: 原型继承 + 借用构造函数模式 (组合继承.js) --> 原型继承真正大量使用的典型方法。

原型式继承: (原型式继承.js)

Object.create(prototype, attributs): 依然会共享prototype的实例属性。

寄生式继承
组合寄生式继承 (组合寄生式继承.js) : 引用类型最理想的继承方式。

/************************END OF CHAPTER 6 *********************************/

第8章： BOM
ESCMScript是js的核心。web中的核心： BOM
bom的核心：windows ：浏览器实例 + global对象。

定义在windows上的变量可以delete： delete windows.value
用var定义的全局变量configurable = false, 不可以delete
top对象指向最高层框架 top.frames[0]
parent指向当前框架的上层框架

窗口位置
修改窗口位置: window.moveTo(2 arguments), moveBy(): 往往被浏览器禁用，且只对最外层window有效。
windows.screenLeft, screenTop (修改窗口.js)

窗口大小：window.innerWidth (页面窗口大小)/ outerWidth （浏览器大小） (chrome里相同)
viewport（视口大小）：标准模式下 document.documentElement.clientWidth / document.body.clientWidth
window.open(,,,)

(see 窗口位置.js)

拦截窗口。windowx = window.open(,,,) 
if (windowx == null) {
  console.log('window is blocked!')
}

location既是windows对象也是document对象。
location.assign('url') --> window.location = '' / location.href = ''
或者通过修改location点属性来更改url。每次更改都会重新加载url。（会添加浏览器记录，如果不需要，可以用replace代替assign）

location.reload() //优先从缓存中加载
location.reload(true) //强制从服务器加载

navigator： 识别浏览器点事实标准
screen对象: 用处不大，每个浏览器实现标准也不尽相同。screen.resizeTo(...) 默认一般也被禁止。

history: window.history, 每个窗口，每个标签页的history都不同。
history.go(-1 | 1 | 2)
history.go('pornhub.com') //跳转到最近浏览过的包含该字符串的history
history.back() / forward()

/************************END OF CHAPTER 8 *********************************/
第10章 DOM
node: node.type 常用 node.type = NODE.ELEMENT_NODE (1) / NODE.TEXT_NODE (3)
nodeName + nodeValue

每个node都有: node.childNodes, 其中保存着一个NodeList对象。
node.parentNode
node.nextSibling / node.previousSibling
node.firstChild = node.childNodes[0]
同理 node.lastChild = node.childNodes[node.childNodes.length - 1]
node.hasChildNodes() --> check if child nodes exist (1 or more)

以上属性，只读

node.appendChild()
node.insertBefore(newNode, {}) // if args[1] = null, 成为最后一个节点。
node.replaceNode(newNode, oldNode) // e.g. node.replaceNode(newNode, node.lastChild) : 替换最后一个节点。
node.removeNode(nodeToReplace) // 被移除的node还存在，只是所有关系指针都被移除，在文档中已经没有了自己的位置。

node.cloneNode(true | nothing) // true表示也复制子节点 （不复制js事件等属性，只复制node属性）复制前建议移除事件等 （因为IE有bug）

Document类型 (子元素中Element最多一个: html)
document (= window.document)
document.documentElement --> <html>标签
document.documentElement  == document.childNodes[0] == document.firstChild
document.body (注意。body并不是document的childNode)

document.title
document.domain（可修改）/.URL (只读)/.referrer (只读)
document.domain不能设置未跨越，但可以设置为子域。如果包含子框架，则可以将不同框架的domain设置为相同的domain来实现两者
的js互通。

document.getElementById
document.getElementsByName
document.getElementsByTagName: return HTMLCollection
语法糖 document.anchors/.forms/.images/.links

文档写入： document.write()/writelin()/open()/close()

各种node类型：
元素节点：Element 
element.tagName; (总是输出大写。)

HTMLElement: Element子类。 id, title, dir, className, etc. 所有公认的属性都可以这么获取，不需要用getAttribute()
自定义属性最好加上 data-

element.getAttribute()/set*/remove*
变种：
pNode.attributes.getNamedItem('id').nodeName/nodeValue --> 一般更多的用上面。但是可以遍历： pNode.attributes.length 
node.attributes.specified --> 遍历中有用，为true表示是显式设置。

document.createElement('div')

元素子节点: 可能包括空白符之类的，遍历时记得判断node.nodeType

Text类型 （nodeType = 3)
node.nodeValue | node.data// 文本内容
node.nodeValue = 'modified' //有html标签的话会被转义的说
document.createTextNode(nodeValue)

element.normalize() // 相反作用: element.firstChild.splitText(nodeValue)

Comment类型: nodeType = 8， nodeValue = commentText, nodeName = '#comment', parentNode = Element or document

DocumentType类型 （ie, chrome不支持）
DocumentFragment (文档片段。很有用。插入文档片段时本身并不会插入。非常棒。算是一个优化。)

Attr类型 （不推荐直接操作）

NodeList， 和NamedNodeMap, HTMLCollection一样，是实时更新的，注意无限循环问题。
应该尽量减少访问nodelist的次数，因为都将进行基于文档的查询。可以考虑将nodelist取得的值缓存起来。

/************************END OF CHAPTER 10 *********************************/
第十一章 DOM扩展
querySelector: 符合的第一个元素
document.querySelector(): 基于文档查找
DocumentFragement/Element.querySelector()：基于元素后代查找

querySelectorAll(): runtime screenshot --> RETURN NodeList，
matchesSelector(): 不同浏览器实现不同（p288）

只选择元素节点
nextElementSibling
firstElementChild
childElementCount

HTML5
getElementsByClassName(): 原生实现，有性能优势。： return NodeList （和getElementsByTagName等方法一样，有性能问题）
可以通过这个方法为同一类集合添加事件等。

classList (type: DOMTokenList): add/remove/contains/toggle //supported only by Firefox and chrome）

HTMLDoment扩展
document.activeElement //获得焦点元素
document.hasFocus() //文档是否获得了焦点
document.compatMode
document.head

document.charset
document.defaultCharset

自定义属性: data-*, 通过node.dataset来访问: dataset returns a DOMStringMap (name - value)

innerHTML: 各种对其中脚本内容的严格限制，建议了解一下: p294 - p297
outerHTML: 包括调用元素的html内容
总之如果不带脚本内容的话还是不错的，比javascript执行效率高很多

scrollIntoView(): 滚动页面(注： 没有滚动效果)

文档模式: document mode: 决定了可以使用什么功能
强制设置文档模式: X-UA-Compatible or <meta http-equiv='X-UA-Compatible' content='IE=IEVersion'>

element.children (element children only): element.children.length == element.childElementCount;

contains() 方法
innerText // firefox 不兼容。但是有 textContent
outerText // write时替换整个元素

滚动： 除了HTML5纳入标准的scrollIntoView()以外，还有各个浏览器实现的自己的方法。但还是scrollIntoView()最常用。

/************************END OF CHAPTER 11 *********************************/
第12章 DOM2和DOM3

关于命名空间的一些支持
样式：
任何支持style的html元素都有一个style属性，可以直接通过这个设置style， (type: CSSStyleDeclaration)
node.style.background = blue
node.style.csstext //返回设置的style属性。不返回class的赋值
cssText是一次设置所有style最简便的方法。了解一下

node.style.length
node.style.item(index) //两者结合，用来遍历。

document.defaultView.getComputedStyle(node, null) //返回计算样式， 只读。 IE不支持，但是有node.currentStyle返回计算样式
getComputedStyle也会包括默认值，所以不用企图用遍历来获得显式设置的样式

元素大小
偏移量
console.log(node.offsetLeft) ： 左边框到offsetParent左边框的距离
console.log(node.offsetTop)
console.log(node.offsetWidth) ：元素宽度，包括垂直方向滚动条宽度。border, margin
console.log(node.offsetHeight)
可以靠循环得到相对页面的偏移量。

客户区：
clientWidth/Height: 不包括border的宽度/高度 （element height + padding）
常用case： 确定浏览器视口大小： document.documentElement.clientWidth || document.body.clientWidth (减去了body的border和margin)

滚动大小
scrollHeight/Width: 在没有滚动条的情况下，元素内容的总高度
scrollLeft/Top

在没有滚动条的前提下，scrollHeight和clientWidth一直
在标准模式下，文档总高度是document.documentElement.scrollHeight, (IE7之前是document.body.scrollHeight)

遍历：(IE8-不支持DOM遍历)
document.createNodeIterator(rootNode, whatToShow, filter, entityReferenceExpansion: boolean) (DOM2.js)
previousNode(), nextNode()

TreeWalker是nodeiterator更高级的版本。(不一样的船新版本)，用于firstChild()/lastChild()/nextSibling/previousSibling/currentNode
几个额外的方法，从而随心所欲的让遍历向不同方向移动。

范围 （Range）

/************************END OF CHAPTER 12 *********************************/
第13章 事件
事件冒泡 + 事件捕获
行内js代码不能使用未转义html语法： & “” > <等： onclick="alert('clicked')"
onclick="alert(this.value)" // this等于事件的目标元素
onclick="alert(event.type)"
如此行内js代码，可以直接访问全局作用域变量，如 document。以及如果当前元素是表单元素，则可以访问表单父元素（form）
e.g. alert(username.value)

DOM0级事件处理： node.onclick = function() {}， 移除： node.onclick = null
DOM2级事件处理： addEventListener: 可以添加多个。 移除只能靠 removeEventListener, 参数必须相同，这意味着addEventListener
添加的匿名函数不能删除

IE添加事件： node.attachEvent / node.detachEvent: this = window
event.stopPropagation // 阻止捕获或者冒泡
event.currentTarget / target (事件的目标元素) / this: this = currentTarget (always. 正在处理的当前元素)
event.eventPhase : 事件阶段 1 捕获 2 符合 3 冒泡

IE中的event对象
event.srcElement: 事件的目标元素
event.returnValue: = event.preventDefault. 设置为false来阻止默认行为
event.cancelBubble: = event.stopPropagation

事件： UI, load/unload, error (on window if js error, on img if failing to load image, etc), abort, etc

load, addEventListener or <body onload='event()'>, <img onload=''>

unload: 使用case最多的是清除引用，避免内存泄漏
resize/unload's event.target = document

焦点事件： focus 不冒泡/focusin (冒泡)/blur/focusout

鼠标事件：click/dbclick/mousedown (用户按下任意鼠标按钮)/mouseup(用户释放任意鼠标按钮)/
mouseenter(光标移动到元素上，不冒泡)/mouseover(光标移动到元素上，冒泡 如果子元素触发，则父元素也触发了)
mouseleave(不冒泡)/mouseout(冒泡)
mousemove(在元素内部移动触发)/

鼠标事件具有： clientX, clientY （客户区位置）| pageX, pageY （相对页面位置）|| screenX, screenY (相对屏幕的坐标)
pageX = clientX + document.body.scrollLeft || document.documentElement.scrollLeft
e.shiftKey || e.metaKey || e.ctrlKey || e.altKey : true/false

click事件： event.button: 0 1 2(左键中键右键)

mousewheel事件： event.wheelDelta +120x (向前滚) || -120(向后滚)

触摸设备：不支持鼠标，
- so没有dbclick事件
- 轻击可单击元素触发mousemove事件，如果内容没变化则依次触发mousedown, mouseup, click事件。
- 两个手指放屏幕上且页面随着手指移动而滚动会触发mousewheel和scroll事件。

无障碍问题： 可以通过回车来触发click事件
- 比起mousedown和mouseup，更推荐click处理事件，避免代码无法执行。
- 不要用mouseover来向用户显示新的选项。
- 不要用dbclick处理重要操作，键盘无法触发这个事件。

键盘事件
keydown （按任意键位）| keypress (按字符) | keyup
针对文本输入，有一个textInput事件。
keydown, keyup : event.keyCode, event.charCode: keypress
textInput事件： 类似keypress，但是只有在可编辑区域内按字符键才会触发。：event.data, event.inputMethod(support by IE only)

变动事件：当DOM结构发生改变的时候触发：
 DOMNodeRemoved: event.target = node to delete, event.relatedNode = parent node (触发事件时尚未删除。冒泡)， 
 同时触发其子节点及自身的DOMNodeRemovedFromDocument事件，不冒泡，最后触发parent node的DOMSubtreeModified事件。
 DOMNodeInserted:
event.target = node to add, event.relatedNode = parent node (触发事件时尚未加入。冒泡)， 
 同时触发其子节点及自身的DOMNodeInsertedIntoDocument事件，不冒泡，最后触发parent node的DOMSubtreeModified事件。

HTML5事件
contextMenu: 冒泡，所以可以指定一个document事件来处理。属于鼠标事件，所以包括光标信息，通常使用contextMenu来显示自定义菜单，用onclick
事件来隐藏菜单

beforeunload: 卸载window前询问用户是否卸载。必须event.returnValue = message, 然后 return message

DOMContentLoaded: DOM结构完成后就触发。 对于不支持该事件的浏览器，可以设置一个setTimeout(fn, 0)

pageshow和pagehide： (only supported by firefox and opera) 了解一下。

hashchange事件： event.newURL, event.oldURL， 最好用location.hash

设备事件：

safari: orientationchange事件。 window.orientation: 0, 90 (向左横着)，-90(向右横着)
了解一下: MozOrientation, deviceorientation, devicemotion, 

触摸和手势事件 (书中主要针对的是ios)

内存和性能：
事件委托 (事件.js) 最适合事件委托的事件右: mousedown, mouseup, keypress, keydown, keyup
移除事件处理程序： 1. 在移除DOM元素之前，记得移除绑定的事件，否则还保存在内存里。2. unload 页面时，也需要
移除加载页面时绑定的事件。😪

模拟事件
document.createEvent() then document.dispatchEvent()
事件类型: UIEvents, MouseEvents, MutationEvents, HTMLEvents

模拟鼠标事件: document.createEvent('MouseEvents'), then event.initMouseEvent() then node.dispatchEvent()
模拟键盘事件: document.createEvent('KeyboardEvent'), then event.initKeyboardEvent() then node.dispatchEvent()

模拟其他事件: createEvent('MutationEvents') 等

自定义事件： createEvent('CustomEvent'), then initCustomEvent()

IE中的事件模拟： 不一样。document.createEventObject(), then customize event, then fireEvent().

/************************END OF CHAPTER 13 *********************************/
第16章： HTML5脚本编程

XDM: cross-domain-message. 跨文档通信。postMessage(url, args)

拖放事件
被拖动元素： dragstart (ondragstart), drag, dragend
当拖动到一个可被放置的目标时该目标： dragenter, dragover, dragleave | drop
可以通过改写dragenter, dragleave的默认行为来将目标设置成可放置目标。

dataTransfer：
拖动开始，被拖动元素的数据被setData(type, data)，或者可以手动setData() drop的时候，被drop的元素getData()。
type：或是短数据类型text|url，或者是text/plain|text/url-list。
注： 一定先验证短类型，IE10之前不支持扩展的MIME类型。
dataTransfer.dropEffect: 被拖动的元素能执行什么放置行为，在dragenter事件设置
dataTransfer.effectAllowed: 表示允许被拖动元素的dropEffect，在dragstart事件设置

默认就可以被拖动的元素： 图像，链接，被复制的文本。
显式设置： draggable='true/false'

媒体元素
video, audio: 必须至少包括src (之后再了解)

历史状态和管理：
history.pushState(data, '', relativeUrl)
window.addEventListener('popstate', fn) //按了 后退 键触发。
更换当前状态： replaceState(data, relativeUrl): 和pushState的区别是不会更新历史状态栈

/************************END OF CHAPTER 16 *********************************/
第22章 高级技巧

高级函数：
一些高级技巧：
1. 安全的类型检查。
instanceof 必须对象在同一个全局作用域。如果不是就不行。解决办法，利用object.prototype.toString返回
[object NativeConstructorName] (注： 只针对原生构造函数，对于自定义构造函数，永远返回[object Object])

2. 作用域安全的构造函数 (2个例子，第二个解释了继承时会遇到的问题。 高级函数.js)
   （普通的构造函数如果不new的话，会assign给window，因为this = window）

3. 惰性载入函数 (高级函数.js)

4. 函数绑定(高级函数.js)

5. 函数柯里化 (高级函数.js): 用于创建已经设置好了一部分参数的函数，提供了强大的动态创建函数的功能


防篡改对象
es5定义了防篡改的方法。一旦定义，就不能修改了
Object.preventExtensions(object)
Object.isExtensible(obj)
修改或者删除已有方法不受影响

密封对象 (Object.seal(obj)): 与unextensible object相比，还不能删除属性和方法
Object.isSealed() --> 也会影响到isExtensible() of course

冻结对象：最为严格，甚至不能modify properties:
Object.freeze(object)
Object.isFrozen(object)

以上3种模式，在严格模式下如果出错会报错。非严格模式下会静默失败。


高级定时器： 
setTimeout()和setInterval() 只是表示在规定时间后将代码插入执行队列。
setInterval()可能会因此导致有一些被跳过。

Yielding process: (高级函数.js)
函数节流 (debounce)

自定义事件(高级函数.js)
拖放(拖放事件.js)

/************************END OF CHAPTER 22 *********************************/